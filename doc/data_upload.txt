Taxonomy module - Data Upload Tips and Tricks

# General guidlines for uploading your own taxonomy data into db

There are three options for populating taxonomy db with your onw data:
1. write plain sql queries
2. write django/python script to create db objects
3. use DRF api to post the data

All options require that you upload your data without referencing to yet non-existing objects (e.g. adding taxon node for which parent is not available yet, or adding synonym without current name present in db.)


WHEN USING SQL QUERIES:

If you decide to upload data using plain sql queries, you also need to add edge objects (tbl Edge) to all of its parent objects (full lineage) and acts with the type "new_taxon" - this is done automatically when using options 2 and 3.

After tree, taxon name concept, taxon node, edge, act[, hybrid, vernacular name] objects have been uploaded, the following commands have to be run - 

1. python manage.py populate_edge_list <tree_id> (creates edges to root node for specific tree)
2. python manage.py populate_pre_traversal (calculates traversal order)

NB! tree root node is created automatically (by post_save) when new tree is added. Tree root node does not require taxon name concept object to be linked to.


WHEN USING DJANGO/PYTHON OR DRF API:

No additional commands (except building elasticsearch indexes) are needed. It is recommended to turn off realtime indexing in settings (HAYSTACK_SIGNAL_PROCESSOR) for quicker data upload and rebuild index after that. This can be achieved by starting server with fast run options (elasticsearch using BaseSignalProcessor and debug mode switched off) - 

make fast-server

There are two batch upload scripts created to handle data 1) in specific Dyntaxa (https://www.dyntaxa.se/) xml format, and 2) in simple csv format.

XML FOR DYNTAXA

xml processor can be simply run on localhost by specifying infile and tree_id parameters - 
python xml_batch_upload.py infile [-t tree_id] 

NB! Work in progress, needs further additions, modifications, and testing. Currently only tested on Protozoa and Fungi testsets. Synonym info needs to be checked externally using dyntaxa's own web service.

NB2! Dyntaxa web service provides non-valid xml documents, the following s, i, and a definitions need to be added in the beginning of file before batch upload script will be able to process xml - 

<s:Envelope> should be <s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
<GetTaxonTreesBySearchCriteriaResult> should be <GetTaxonTreesBySearchCriteriaResult xmlns:a="http://schemas.datacontract.org/2004/07/ArtDatabanken.WebService.Data" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">

CSV LOADER

cvs loader can be run by specifying infile, tree id, taxon rank format, and base url - 
python csv_batch_upload.py infile [-t tree_id] [-r rank_type] -b http://localhost:7000/api/ -a http://localhost:7000/oauth2/access_token/

There can be 9 fields in tab-separated (\t) infile:

1) taxon id
2) parent taxon id
3) taxon rank id
4) taxon name / inter- and intraspecific epithet
5) name author
6) year described in
7) original code for this name
8) vernacular names (multiple names separated by ;, fllowed by ISO 639-2 language code)
9) use parentheses (whether to include parentheses around author and year combination)

Example input based on Dyntaxa data (header line should be included):

taxon_id	parent_id	rank_id	name/epithet	author	year	code	vernacular names	use_parentheses
3000188	0	40	Lepidoptera	Linnaeus	1758	3000188	fjärilar:swe	
2002975	3000188	48	Hesperioidea	Latreille	1809	2002975	tjockhuvudfjärilar:swe	
2001250	2002975	50	Hesperiidae	Latreille	1809		2001250	tjockhuvuden:swe	
1000492	2001250	53	Pyrginae	Burmeister	1878		1000492	visslare:swe	
1000509	1000492	60	Erynnis	Schrank	1801		1000509		
201018	1000509	70	tages	Linnaeus	1758		201018	skogsvisslare:swe	1

There are 3 ways to define taxon ranks - 1) Dyntaxa categories, 2) named ranks, and 3) PlutoF categories used within this module. See the csv upload script for the list and mapping of these categories.

# resetting traversal order
To reset traversal order, simply empty he taxonomy_traversalorder table, and run the following command - 

python manage.py populate_pre_traversal


# Update id_seq values for all tables (needed if you add data by specifying primary keys yourself)
SELECT setval('taxonomy_tree_id_seq', (SELECT max(id) FROM taxonomy_tree));
SELECT setval('taxonomy_taxonnode_id_seq', (SELECT max(id) FROM taxonomy_taxonnode));
SELECT setval('taxonomy_taxonnameconcept_id_seq', (SELECT max(id) FROM taxonomy_taxonnameconcept));
SELECT setval('taxonomy_commonname_id_seq', (SELECT max(id) FROM taxonomy_commonname));
SELECT setval('taxonomy_act_id_seq', (SELECT max(id) FROM taxonomy_act));
SELECT setval('taxonomy_edge_id_seq', (SELECT max(id) FROM taxonomy_edge));
SELECT setval('taxonomy_traversalorder_id_seq', (SELECT max(id) FROM taxonomy_traversalorder));
SELECT setval('taxonomy_hybridtaxonnode_id_seq', (SELECT max(id) FROM taxonomy_hybridtaxonnode));
